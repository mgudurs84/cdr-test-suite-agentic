import { Octokit } from '@octokit/rest';
import type { TestCaseResponse } from '@shared/schema';

interface GitHubConfig {
  token?: string;
  owner: string;
  repo: string;
}

export class GitHubService {
  private octokit: Octokit | null = null;
  private config: GitHubConfig;

  constructor() {
    const token = process.env.GITHUB_TOKEN;
    
    if (token) {
      this.octokit = new Octokit({
        auth: token,
      });
    }

    this.config = {
      token: token,
      owner: 'your-username', // Will be overridden by request
      repo: 'fhir-test-cases' // Default repo name
    };
  }

  async pushTestCasesToGitHub(
    testCases: TestCaseResponse,
    options: {
      owner: string;
      repo: string;
      batchNumber: string;
      message?: string;
    }
  ): Promise<{ success: boolean; url?: string; error?: string }> {
    
    if (!this.octokit) {
      return {
        success: false,
        error: 'GitHub token not configured. Please set GITHUB_TOKEN environment variable.'
      };
    }

    try {
      const { owner, repo, batchNumber, message } = options;
      
      // First, check if the repository exists
      let repositoryExists = true;
      try {
        await this.octokit.repos.get({
          owner,
          repo,
        });
        console.log(`‚úÖ Repository ${owner}/${repo} exists`);
      } catch (repoError: any) {
        if (repoError.status === 404) {
          repositoryExists = false;
          console.log(`üìù Repository ${owner}/${repo} does not exist, creating it...`);
          
          // Try to create the repository
          const createResult = await this.createRepository({
            name: repo,
            description: 'FHIR Test Cases Repository - Generated by CDR Test Quality Suite',
            private: false
          });
          
          if (!createResult.success) {
            return {
              success: false,
              error: `Repository '${owner}/${repo}' does not exist. Please either:\n\n1. Create the repository manually at https://github.com/new\n2. Or update your GitHub token permissions:\n   - Go to GitHub ‚Üí Settings ‚Üí Developer Settings ‚Üí Personal Access Tokens\n   - Edit your token and ensure 'repo' permission is checked\n   - Use the new token in your GITHUB_TOKEN environment variable\n\nError details: ${createResult.error}`
            };
          }
          
          console.log(`‚úÖ Repository ${owner}/${repo} created successfully`);
        } else {
          // Some other error (permissions, etc.)
          return {
            success: false,
            error: `Failed to access repository ${owner}/${repo}: ${repoError.message || 'Unknown error'}`
          };
        }
      }
      
      // Create filename with timestamp
      const timestamp = new Date().toISOString().split('T')[0];
      const filename = `test-cases/batch-${batchNumber}-${timestamp}.json`;
      
      // Prepare file content
      const content = JSON.stringify(testCases, null, 2);
      const contentBase64 = Buffer.from(content).toString('base64');
      
      // Create commit message
      const commitMessage = message || `Add FHIR test cases for batch ${batchNumber}`;
      
      console.log(`üì§ Pushing test cases to GitHub: ${owner}/${repo}`);
      console.log(`üìÅ File: ${filename}`);
      
      // Check if file already exists
      let existingFile;
      try {
        const { data } = await this.octokit.repos.getContent({
          owner,
          repo,
          path: filename,
        });
        existingFile = data;
      } catch (error) {
        // File doesn't exist, which is fine
        existingFile = null;
      }

      // Create or update the file
      const result = await this.octokit.repos.createOrUpdateFileContents({
        owner,
        repo,
        path: filename,
        message: commitMessage,
        content: contentBase64,
        sha: existingFile && !Array.isArray(existingFile) ? existingFile.sha : undefined,
      });

      console.log('‚úÖ Test cases pushed to GitHub successfully');
      
      return {
        success: true,
        url: result.data.content?.html_url || `https://github.com/${owner}/${repo}/blob/main/${filename}`
      };

    } catch (error) {
      console.error('‚ùå Error pushing to GitHub:', error);
      
      let errorMessage = 'Unknown error occurred';
      if (error instanceof Error) {
        errorMessage = error.message;
      }
      
      return {
        success: false,
        error: `Failed to push to GitHub: ${errorMessage}`
      };
    }
  }

  async createRepository(options: {
    name: string;
    description?: string;
    private?: boolean;
  }): Promise<{ success: boolean; url?: string; error?: string }> {
    
    if (!this.octokit) {
      return {
        success: false,
        error: 'GitHub token not configured'
      };
    }

    try {
      const result = await this.octokit.repos.createForAuthenticatedUser({
        name: options.name,
        description: options.description || 'FHIR Test Cases Repository',
        private: options.private || false,
        auto_init: true,
        license_template: 'mit'
      });

      return {
        success: true,
        url: result.data.html_url
      };

    } catch (error: any) {
      console.error('‚ùå Error creating repository:', error);
      
      let errorMessage = 'Unknown error';
      if (error.status === 403) {
        errorMessage = 'Your GitHub token does not have permission to create repositories. Please check that your token has "repo" scope permissions.';
      } else if (error instanceof Error) {
        errorMessage = error.message;
      }
      
      return {
        success: false,
        error: errorMessage
      };
    }
  }

  isConfigured(): boolean {
    return !!this.octokit;
  }

  async fetchCSVFromGitHub(githubUrl: string): Promise<{ success: boolean; content?: string; error?: string }> {
    try {
      const urlMatch = githubUrl.match(/github\.com\/([^/]+)\/([^/]+)\/blob\/([^/]+)\/(.+)/);
      
      if (!urlMatch) {
        return {
          success: false,
          error: 'Invalid GitHub URL format. Expected: https://github.com/owner/repo/blob/branch/path/to/file.csv'
        };
      }

      const [, owner, repo, branch, filePath] = urlMatch;

      if (!this.octokit) {
        const rawUrl = githubUrl.replace('/blob/', '/raw/');
        const response = await fetch(rawUrl);
        
        if (!response.ok) {
          return {
            success: false,
            error: `Failed to fetch file from GitHub: ${response.statusText}`
          };
        }

        const content = await response.text();
        return {
          success: true,
          content
        };
      }

      const { data } = await this.octokit.repos.getContent({
        owner,
        repo,
        path: filePath,
        ref: branch
      });

      if (Array.isArray(data) || data.type !== 'file') {
        return {
          success: false,
          error: 'The URL does not point to a file'
        };
      }

      const content = Buffer.from(data.content, 'base64').toString('utf-8');

      return {
        success: true,
        content
      };

    } catch (error) {
      console.error('‚ùå Error fetching CSV from GitHub:', error);
      
      let errorMessage = 'Unknown error occurred';
      if (error instanceof Error) {
        errorMessage = error.message;
      }
      
      return {
        success: false,
        error: `Failed to fetch CSV from GitHub: ${errorMessage}`
      };
    }
  }

  async testGitHubUrl(githubUrl: string): Promise<{ success: boolean; error?: string }> {
    try {
      const urlMatch = githubUrl.match(/github\.com\/([^/]+)\/([^/]+)\/blob\/([^/]+)\/(.+)/);
      
      if (!urlMatch) {
        return {
          success: false,
          error: 'Invalid GitHub URL format'
        };
      }

      const rawUrl = githubUrl.replace('/blob/', '/raw/');
      const response = await fetch(rawUrl, { method: 'HEAD' });
      
      if (!response.ok) {
        return {
          success: false,
          error: 'File not accessible or does not exist'
        };
      }

      return { success: true };

    } catch (error) {
      return {
        success: false,
        error: 'Failed to connect to GitHub'
      };
    }
  }
}

export const githubService = new GitHubService();